hid = read.csv("getdata_data_ss06hid.csv")
str(hid)
agricultureLogical = (hid$ACR == 3 & hid$ == 6)
agricultureLogical = (hid$ACR == 3 & hid$AGS == 6)
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
jeff = jpeg("getdata_jeff.jpg")
quantile(jeff, probs=c(0.3, 0.8))
str(jeff)
?jpeg
jeff = readJPEG("getdata_jeff.jpg", native = TRUE)
quantile(jeff, probs=c(0.3, 0.8))
jeff = readJPEG("getdata_jeff.jpg", native = TRUE)
quantile(jeff, probs=c(0.3, 0.8))
str(gdp)
gdp = read.csv("getdata_data_GDP.csv")
edu = read.csv("getdata_data_EDSTATS_Country.csv")
str(gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5)
str(gdp)
?read.csv
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE)
str(gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE)[, 1:2]
str(gdp)
colnames(gdp) = c("country", "rank")
str(gdp)
str(edu)
edu = read.csv("getdata_data_EDSTATS_Country.csv")[, 1]
?merge
str(edu)
edu = read.csv("getdata_data_EDSTATS_Country.csv")[, 1:2]
str(edu)
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_edu)
gdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]
str(gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
edu = read.csv("getdata_data_EDSTATS_Country.csv", stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_edu)
gdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]
str(gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
edu = read.csv("getdata_data_EDSTATS_Country.csv", stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_
)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp$rank = as.integer(gdp$rank)
edu = read.csv("getdata_data_EDSTATS_Country.csv", stringsAsFactors = FALSE)[, 1:2]
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_edu)
gdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]
any(is.na(gdp_edu$Long.Name))
str(edu)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp$rank = as.integer(gdp$rank)
edu = read.csv("getdata_data_EDSTATS_Country.csv", stringsAsFactors = FALSE)
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_edu)
gdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]
any(is.na(gdp_edu$rank))
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp$rank = as.integer(gdp$rank)
gdp = gdp[!is.na(gdp.rank), ]
edu = read.csv("getdata_data_EDSTATS_Country.csv", stringsAsFactors = FALSE)
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_edu)
gdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp$rank = as.integer(gdp$rank)
gdp = gdp[!is.na(gdp$rank), ]
edu = read.csv("getdata_data_EDSTATS_Country.csv", stringsAsFactors = FALSE)
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_edu)
gdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp$rank
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]
colnames(gdp) = c("country", "rank")
gdp$rank = as.integer(gdp$rank)
gdp = gdp[!is.na(gdp$rank), ]
edu = read.csv("getdata_data_EDSTATS_Country.csv", stringsAsFactors = FALSE)
gdp_edu = merge(gdp, edu, by.x = "country", by.y = "CountryCode")
nrow(gdp_edu)
gdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]
tapply(gdp_edu$rank, gdp_edu$Income.Group, mean)
rankGroups = cut2(gdp_edu$rank, g=5)
library(Hmisc)
rankGroups = cut2(gdp_edu$rank, g=5)
table(rankGroups, gdp_edu$Income.Group)
cameraData = read.csv("Baltimore_Fixed_Speed_Cameras.csv")
str(cameraData)
splitNames = strsplit(names(cameraData), "\\.")
splitNames[5]
splitNames
unlist(splitNames)
sapply(splitNames, function(x) { x[1]})  # take first elments and return a vector
sub(".1", "", names(cameraData), )
sub(".1", "", names(cameraData))
gsub(".1", "", names(cameraData))  # global sub
grep("Alameda", cameraData$intersection)
table(grepl("Alameda", cameraData$intersection))
grep("Alameda", cameraData$intersection, value = TRUE)
cameraData[grepl("Alameda", cameraData$intersection), ]
?grepl
nchar("Richard Yin")
substr("Richard Yin", 1, 7)
paste("Richard", "Yin")
paste0("Richard", "Yin")
str_trim("Richard Yin   ")
trim("Richard Yin   ")
library(stringr)
str_trim("Richard Yin   ")
gsub(" ", "_", "Richard Yin")
dl = date()
class(dl)
d2 = Syss.Date()
class(d2)
d2 = Sys.Date()
class(d2)
format(d2, "%m-%d-%Y")
z = as.Date(c("01-01-1960", "01-02-1960", "03-31-1960", "07-30-1960"))
z[1] - z[2]
z = as.Date(c("01-01-1960", "01-02-1960", "03-31-1960", "07-30-1960"), "%m-%d-%Y")
z[1] - z[2]
as.numeric(z[1] - z[2])
weekdays(z)
months(z)
names(hid)
strsplit(names(hid))[123]
strsplit(names(hid), "wgtp")[123]
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)
str(gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, c(1, 2, 5)]
names(gdp) = c("country", "rank", "gdp")
gdp$gdp = gsub(",", "", gdp$gdp)
mean(gdp$gdp)
mean(gdp$gdp, na.rm = TRUE)
gdp$gdp
gdp$gdp = as.numeric(gsub(",", "", gdp$gdp))
mean(gdp$gdp, na.rm = TRUE)
gdp = gdp[!is.na(gdp$rank), ]
gdp$gdp = as.numeric(gsub(",", "", gdp$gdp))
mean(gdp$gdp)
nrow(gdp)
gdp$rank = as.integer(gdp$rank)
gdp = gdp[!is.na(gdp$rank), ]
gdp$gdp = as.numeric(gsub(",", "", gdp$gdp))
mean(gdp$gdp)
?ifelse
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, c(1, 2, 5)]
names(gdp) = c("country", "rank", "gdp")
gdp$rank = ifelse(gdp$rank == "", NA, as.integer(gdp$rank))
gdp = gdp[!is.na(gdp$rank), ]
gdp$gdp = as.numeric(gsub(",", "", gdp$gdp))
mean(gdp$gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, c(1, 2, 5)]
names(gdp) = c("country", "rank", "gdp")
gdp$rank
?is.numeric
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, c(1, 2, 5)]
names(gdp) = c("country", "rank", "gdp")
gdp$rank = ifelse(is.integer(gdp$rank), as.integer(gdp$rank), NA)
gdp = gdp[!is.na(gdp$rank), ]
gdp$gdp = as.numeric(gsub(",", "", gdp$gdp))
mean(gdp$gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, c(1, 2, 5)]
names(gdp) = c("country", "rank", "gdp")
gdp$rank = ifelse(is.integer(gdp$rank), as.integer(gdp$rank), NA)
gdp$rank
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, c(1, 2, 5)]
names(gdp) = c("country", "rank", "gdp")
gdp$rank = as.integer(gdp$rank)
gdp = gdp[!is.na(gdp$rank), ]
gdp$gdp = as.numeric(gsub(",", "", gdp$gdp))
mean(gdp$gdp)
str(gdp)
gdp = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)
str(gdp)
cnames = read.csv("getdata_data_GDP.csv", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 4]
length(grep("^United", cnames))
str(gsub_edu)
str(gdp_edu)
yearEnd = grep("Fiscal year end:", gdp_edu$Special.Notes, value=TRUE)
yearEnd
?gsub
?match
yearEnd = grep("Fiscal year end:", gdp_edu$Special.Notes, value=TRUE)
yearEndMonth = gsub("^Fiscal year end: ", "", yearEnd)
yearEndMonth = gsub(" .*$", "", yearEndMonth)
yearEnd
yearEndMonth
sum(yearEndMonth == "June")
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
year(sampleTimes)
years(sampleTimes)
as.Date(sampleTimes)$Year
as.Date(sampleTimes)
dates = as.Date(sampleTimes)
dates
str(dates)
class(dates)
dates = as.Date(sampleTimes, "%Y-%m-%d")
dates
dates[1]
year(dates[1])
as.numeric(format(dates, "%Y"))
years = as.numeric(format(dates, "%Y"))
sum(years == 2012)
?weekdays
weekdays(Sys.Date())
sample_2012 = sampleTimes(years == 2012)
sum(weekdays(sample_2012) == "Monday")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
years = as.numeric(format(sampleTimes, "%Y"))
sum(years == 2012)
sample_2012 = sampleTimes(years == 2012)
sum(weekdays(sample_2012) == "Monday")
sample_2012 = sampleTimes[years == 2012]
sum(weekdays(sample_2012) == "Monday")
