{
    "collab_server" : "",
    "contents" : "set.seed(13435)\nX = data.frame(\"var1\"=sample(1:5), \"var2\"=sample(6:10), \"var3\"=sample(11:15))\nX = X[sample(1:5),]\nX$var2[c(1, 3)] = NA\nX\n\nX[X$var2 > 8,]\nX[which(X$var2 > 8),]\n\nX[order(X$var2),]\nX[order(X$var2, na.last=NA),]\n\n\nlibrary(plyr)\narrange(X, var2)\narrange(X, var2, na.last=NA)  # error, how to solve it?\n\nrestData = read.csv(\"Restaurants.csv\")\nrestData$councilDistrict\nquantile(restData$councilDistrict, na.rm=TRUE)\ntable(restData$councilDistrict)\n\nquantile(restData$councilDistrict, probs=c(0.5, 0.75, 0.9))\n\ntable(restData$zipCode, useNA = \"ifany\")  # useNA: choice of \"no\", \"ifany\", \"always\")\n\ntable(restData$councilDistrict, restData$zipCode)\n\nsum(is.na(restData$councilDistrict))\nany(is.na(restData$councilDistrict))\nall(restData$zipCode > 0) \nrestData$zipCode[restData$zipCode <= 0]\n\ncolSums(is.na(restData))\ncolMeans(is.na(restData))\nall(colSums(is.na(restData)) == 0)\n\ntable(restData$zipCode %in% c(\"21212\",\"21213\"))\nrestData[restData$zipCode %in% c(\"21212\",\"21213\"), ]\n\ndata(\"UCBAdmissions\")\nDF = as.data.frame(UCBAdmissions)\nxtabs(Freq ~ Gender + Admit, data=DF)\ntable(DF$Admit, DF$Gender)    # pay attention to the diff betweee xtabs and table\n\nftable(DF[, c(\"Gender\", \"Admit\", \"Dept\")])\n\nfakeData = rnorm(1e5)\nobject.size(fakeData)\nprint(object.size(fakeData), units=\"Mb\")\n\ns1 = seq(1, 10, by=2)    # Python np.arange\ns2 = seq(1, 10, length = 3)  # Python np.linspace\n\nrestData$zipCodeWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)\n# same as\nrestData$zipCodeWrong = restData$zipCode < 0\ntable(restData$zipCodeWrong, restData$zipCode < 0)\n\nrestData$zipGroups = cut(restData$zipCode, breaks = quantile(restData$zipCode))\ntable(restData$zipGroups)\n\nlibrary(Hmisc)\nrestData$zipGroups = cut2(restData$zipCode, g=4)\ntable(restData$zipGroups)\n\nrestData2 = mutate(restData, zipGroups = cut2(zipCode, g=4))\ntable(restData$zipGroups)\n\nlibrary(reshape2)\nmtcars$carname = rownames(mtcars)\ncarMelt = melt(mtcars, id=c(\"carname\", \"gear\", \"cyl\"), measures.vars=c(\"mpg\", \"hp\"))\nhead(carMelt, n = 3)\ntail(carMelt, n = 3)\n\nnrow(unique(mtcars[, c(\"carname\", \"gear\", \"cyl\")]))\n\ntapply(InsectSprays$count, InsectSprays$spray, sum)\n# another way\nspIns = split(InsectSprays$count, InsectSprays$spray)  # generates a list\nsprCount = lapply(spIns, sum)   # still a list\nunlist(sprCount) # now a vector\nsapply(spIns, sum)  # output: a vector\n\nlibrary(\"dplyr\")\n# six key functions in dplyr: select, filter, arrange, rename, mutate, summarize\nhead(select(mtcars, -(mpg:disp)))\n# in base R, we have to\nhead(mtcars[, -(match(\"city\", names(mtcars)):match(\"disp\", names(mtcars)))])\n\nmtcars.f = filter(mtcars, mpg > 20)\nhead(select(mtcars.f, 2:4, mpg), n=10)\n\n\n\n# Week 3 quiz\nhid = read.csv(\"getdata_data_ss06hid.csv\")\nagricultureLogical = (hid$ACR == 3 & hid$AGS == 6)\nwhich(agricultureLogical)\n\nlibrary(jpeg)\njeff = readJPEG(\"getdata_jeff.jpg\", native = TRUE)\nquantile(jeff, probs=c(0.3, 0.8))\n\ngdp = read.csv(\"getdata_data_GDP.csv\", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 1:2]\ncolnames(gdp) = c(\"country\", \"rank\")\ngdp$rank = as.integer(gdp$rank)\ngdp = gdp[!is.na(gdp$rank), ]\nedu = read.csv(\"getdata_data_EDSTATS_Country.csv\", stringsAsFactors = FALSE)\ngdp_edu = merge(gdp, edu, by.x = \"country\", by.y = \"CountryCode\")\nnrow(gdp_edu)\ngdp_edu[order(gdp_edu$rank, decreasing = TRUE), ][13, ]\n\nrankGroups = cut2(gdp_edu$rank, g=5)\ntable(rankGroups, gdp_edu$Income.Group)\n\n# Week 4\ncameraData = read.csv(\"Baltimore_Fixed_Speed_Cameras.csv\")\nsplitNames = strsplit(names(cameraData), \"\\\\.\")   # returns a list\nsplitNames[5]\nsapply(splitNames, function(x) { x[1]})  # take first elments and return a vector\n\n# another way\nsub(\".1\", \"\", names(cameraData))\ngsub(\".1\", \"\", names(cameraData))  # global sub\n\ngrep(\"Alameda\", cameraData$intersection)    # returns indices\ntable(grepl(\"Alameda\", cameraData$intersection))   # grepl return logical vector\ngrep(\"Alameda\", cameraData$intersection, value = TRUE)  # returns values\ncameraData[grepl(\"Alameda\", cameraData$intersection), ]\n\nnchar(\"Richard Yin\")\nsubstr(\"Richard Yin\", 1, 7)\npaste(\"Richard\", \"Yin\")\npaste0(\"Richard\", \"Yin\")\nlibrary(stringr)\nstr_trim(\"Richard Yin   \")\ngsub(\" \", \"_\", \"Richard Yin\")\n\nd1 = date()\nclass(d1)\nd2 = Sys.Date()\nclass(d2)\nformat(d2, \"%m-%d-%Y\")\n\nz = as.Date(c(\"01-01-1960\", \"01-02-1960\", \"03-31-1960\", \"07-30-1960\"), \"%m-%d-%Y\")\nz[1] - z[2]\nas.numeric(z[1] - z[2])\n\nweekdays(z)\nmonths(z)\n\n# Week 4 Quiz\nhid = read.csv(\"getdata_data_ss06hid.csv\")\nstrsplit(names(hid), \"wgtp\")[123]\ngdp = read.csv(\"getdata_data_GDP.csv\", skip=5, header = FALSE, stringsAsFactors = FALSE)[, c(1, 2, 5)]\nnames(gdp) = c(\"country\", \"rank\", \"gdp\")\ngdp$rank = as.integer(gdp$rank)   # how to surpress warning?\ngdp = gdp[!is.na(gdp$rank), ]\ngdp$gdp = as.numeric(gsub(\",\", \"\", gdp$gdp))\nmean(gdp$gdp)\n\ncnames = read.csv(\"getdata_data_GDP.csv\", skip=5, header = FALSE, stringsAsFactors = FALSE)[, 4]\nlength(grep(\"^United\", cnames))\n\nyearEnd = grep(\"Fiscal year end:\", gdp_edu$Special.Notes, value=TRUE)\nyearEndMonth = gsub(\"^Fiscal year end: \", \"\", yearEnd)\nyearEndMonth = gsub(\" .*$\", \"\", yearEndMonth)\nsum(yearEndMonth == \"June\")\n\nlibrary(quantmod)\namzn = getSymbols(\"AMZN\",auto.assign=FALSE)\nsampleTimes = index(amzn)\n\nyears = as.numeric(format(sampleTimes, \"%Y\"))\nsum(years == 2012)\n\nsample_2012 = sampleTimes[years == 2012]\nsum(weekdays(sample_2012) == \"Monday\")\n\n",
    "created" : 1465745730615.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3260749891",
    "id" : "5D459F69",
    "lastKnownWriteTime" : 1465758521,
    "last_content_update" : 1465758521198,
    "path" : "H:/R/R Projects/DataScience-JHK/Getting and Cleaning Data.R",
    "project_path" : "Getting and Cleaning Data.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}